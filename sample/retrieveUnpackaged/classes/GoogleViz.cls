/*
    Copyright (c) 2008 salesforce.com, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. The name of the author may not be used to endorse or promote products
       derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
    IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
    NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    Utility class for collecting a google auth sub session token for use with all
    Google Data API's
    
    24-Feb-2014		ejandusay		Update: Moved Test method in a separate test class

*/
public class GoogleViz {

/*
Official, up-to-date information can be found here: http://code.google.com/apis/visualization/documentation/reference.html

These comments may be out of date compared to the information found at the above url.

These comments describe the current format of the JSON needed to create a DataTable
in the Google Visualization API js library.

It does not describe the structure of the whole JSON response,
which includes also status, error info (when relevant), signature, and more.

The JSON is to be used as a single parameter to the DataTable constructor, as follows:

// This is the string generated by the server.
var responseStr = '...';

// Create an object out of the string.
// Note that the extra parentheses are needed to avoid known eval problems.
var dataTableJson = eval('(' + responseStr + ')');
// Construct a DataTable object from the response
var dataTable = new google.visualization.DataTable(dataTableJson);

// ... and you are ready to continue:
var container = document.getElementById('chart');
var chart = new google.visualization.AreaChart(container);
chart.draw(dataTable, options);


* - Note that this example is only a snippet, and to activate
it you need to also load the the API from the loader, having the specified div,
 and a bit more.
Please refer to the docs at http://code.google.com/apis/visualization for more info.

The JSON DataTable data structure:
The json should be a js object with only two properties: 'cols' and 'rows'. Each of these properties is an array (described later):
{cols: [<columns>], rows: [<rows>]}
*/

/*
Column structure:
Each column is an object, containing the following properties:
* id:
    - String.
    - Optional.
    - This is the id of the column. Should be unique in this data table.
      Preferably be simple (alphanumeric) so later on you don't have to escape it with backticks when you refer to it.

* label:
    - String.
    - Optional.
    This is the label of the column, and some visualizations (like table, and some charts) actually display it to the users.

* type
   - String.
   - Mandatory.
   - This is the type of this column, must be from one of the following gviz types:
            'boolean' - JavaScript boolean value ('true' or 'false'). Example value: v:'true'
            'number' - JavaScript number value. Example values: v:7 , v:3.14, v:-55
            'string' - JavaScript string value. Example value: v:'hello'
            'date' - JavaScript Date object (zero-based month), with the time truncated. Example value: v:new Date(2008, 0, 15)
            'datetime' - JavaScript Date object including the time. Example value: v:new Date(2008, 0, 15, 14, 30, 45)
            'timeofday' - Array of three numbers and an optional fourth, representing hour (0 indicates midnight), minute, second,
            and optional millisecond. Example values: v:[8, 15, 0], v: [6, 12, 1, 144]
*/

 public class col {
    public col() {}
    public col(string idd ) {id = idd;}
    public col(string idd, string l ) {id = idd; label = l; }
    public col(string idd, string l, string ct ) {id = idd; label = l; ctype =  ct;}
    public string ctype,id,label;
    public string toJsonString() {
        return '{id: "' + id + '", label: "' + label + '", type: "' + ctype + '"}';
    }
 }


/*
Row structure:
Each row is an array of cells. The number of cells should match the number of columns.
A cell can be an object as described below, or a null,
so if you have a row with null values, you can just skip them in the array.
For example, if there are 3 columns, and in  a certain row the first two
cells are nulls, you can specify: [ , , {v: '3rd cell value'}]
*/
 public class row {
    public list<cell> cells = new list<cell>{};
    public row() {}
    public row(list<cell> c) { cells = c; }
    public string toJsonString() {
        system.assert( cells.size() > 0, ' no cells found in row');
        string ret = '{c:[';
        for( cell cc: cells) {
            ret += cc.toJsonString() + ',';
        }
        ret = ret.substring( 0, ret.length() - 1 ) + ']}';
        return ret;
    }
 }


/*Cell structure: Each cell is an object with two optional values:

v: Value. Optional. If does not exists, or contains null, then the cell is assumed to be a null cell. Otherwise, the value type should match the column type, in the following mapping:

  boolean: A javascript boolean value: true, false
  number: A javascript number: 2, -3.2
  string: A javascript string: 'some value'
  date: A javascript Date: new Date(2008, 1, 28, 0, 31, 26)
  datetime: A javascript Date: new Date(2008, 1, 28, 0, 31, 26)
  timeofday: A javascript array of 3 or 4 numbers: [hours, minutes, seconds] or
  [hours, minutes, seconds, milliseconds]

f: Formatted value. String. Optional. The formatted value of this cell. Used by some visualizations (like table, and more). If the formatted value is not defined (or it is null), and is asked for, there is a default formatting that depends on the column type.

 */
 public class cell {
    JSONObject obj = new JsonObject();
    date dt;
    datetime dtm;
    /*timeofday*/
    //string f;
    public cell( ) { }
    public cell( string s) { // plain string
        obj.putOpt( 'v', new JSONObject.value( s ) );
    }
    public cell( Boolean bo) {  // decimal or number
        obj.putOpt( 'v', new JSONObject.value( bo ) );
    }
    public cell( Decimal dec) {  // decimal or number
        obj.putOpt( 'v', new JSONObject.value( dec ) );
    }
    public cell( Date d ) {  // decimal or number
        dt = d;
        obj.putOpt( 'f', new JSONObject.value( d.format() ) );
    }
    public cell( integer i, string s) {  // number value and formated value
        obj.putOpt( 'v', new JSONObject.value( i ) );
        obj.putOpt( 'f', new JSONObject.value( s ) );
    }
    public cell( string val, string formattedVal) {
       obj.putOpt( 'v', new JSONObject.value( val ) );
       obj.putOpt( 'f', new JSONObject.value(formattedVal ) );
    }
    public cell( date d, string s) {  // number value and formated value
        // {v: new Date(2008, 3, 30, 0, 31, 26), f: '4/30/08 12:31 AM'}
        dt = d;
        obj.putOpt( 'f', new JSONObject.value( s ) );
    }
    public cell( datetime d) {  // number value and formated value
        dtm = d;
        obj.putOpt( 'f', new JSONObject.value( d.format() ) );
    }
    // TODO datetime , string
    // TODO timeofday , string
    public string toJsonString() {
        string ret = 'null';
        if ( dtm != null ) {
            ret = '{v: '+googleviz.dateToJavaScript(dtm)+ ', f: "'+
             obj.getString('f') + '"}';
        } else
        if ( dt != null ) {
            ret = '{v: '+googleviz.dateToJavaScript(dt)+ ', f: "'+
             obj.getString('f') + '"}';
        } else
        if ( obj != null ) {
            ret =  obj.ValuetoString();
        }
        return ret;
    }

 }

 public list<row> rowCollection = new list<row>{};
 public list<col> cols = new list<col>{};

 public void addRow( row r ) { rowCollection.add( r) ; }

 // helper to return a Google JSON string from a date
 public static string dateToJavaScript(date dd) {
    string ret = 'new Date(' + dd.year() + ', ' + (dd.month()-1) + ', ' + dd.day() + ', 0, 0, 0)';
    //system.debug( ret );
    return ret;
 }
 public static string dateToJavaScript(datetime dtm) {
    string ret = 'new Date(' +
    dtm.year() + ', ' + (dtm.month()-1) + ', ' + dtm.day() +
    ', '+dtm.hour() +', '+ dtm.minute() +', ' + dtm.second() + ')';
    //system.debug( ret );
    return ret;
 }

// helper to return a Google JSON string from a datetime
 public static string dateToGVizDate(datetime d) {
    GoogleViz.cell dt = new GoogleViz.cell( (DateTime)d );
    string ret = dt.toJsonString();
    return ret;
 }

 // helper to return a Google JSON string from a date
 public static string dateToGVizDate(date d) {
    GoogleViz.cell dt = new GoogleViz.cell( (Date)d );
    string ret = dt.toJsonString();
    return ret;
 }

 public string toJSONString() {
    string ret = '{cols: [';
    for( col c: cols) { ret += c.toJsonString() + ',' ; }
    ret = ret.substring( 0, ret.length() - 1 ) + '], ';
    ret += 'rows: [';
    system.assert( rowCollection.size() > 0 , 'no rows found in object ');
    for( row r: rowCollection) {
        ret += r.toJsonString() + ',';
    }
    ret = ret.substring( 0, ret.length() - 1 ) + ']}';
    ret = ret.replaceAll('\'','');
    ret = ret.replaceAll('\\p{Cntrl}','');
    return ret;
 }

 /* Reference JSON String from: http://code.google.com/apis/visualization/documentation/reference.html#DataTable

    {
       cols: [{id: 'task', label: 'Task', type: 'string'},
                {id: 'hours', label: 'Hours per Day', type: 'number'}],
       rows: [{c:[{v: 'Work'}, {v: 11}]},
              {c:[{v: 'Eat'}, {v: 2}]},
              {c:[{v: 'Commute'}, {v: 2}]},
              {c:[{v: 'Watch TV'}, {v:2}]},
              {c:[{v: 'Sleep'}, {v:7, f:'7.000'}]}
             ]
     }
 */


 

}